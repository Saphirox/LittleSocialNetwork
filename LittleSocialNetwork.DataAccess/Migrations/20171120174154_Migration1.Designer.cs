// <auto-generated />
using LittleSocialNetwork.Common.Definitions.Enums;
using LittleSocialNetwork.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace LittleSocialNetwork.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20171120174154_Migration1")]
    partial class Migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LittleSocialNetwork.Entities.Friendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("FromId");

                    b.Property<int>("Status");

                    b.Property<long>("ToId");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("LittleSocialNetwork.Entities.SingleChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("FromId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("LastEdited");

                    b.Property<DateTime>("PostTime");

                    b.Property<string>("Text");

                    b.Property<long>("ToId");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("SingleChatMessages");
                });

            modelBuilder.Entity("LittleSocialNetwork.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<bool>("PasswordReseted");

                    b.Property<int>("RestorePassowordType");

                    b.Property<int>("Role");

                    b.Property<long?>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LittleSocialNetwork.Entities.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("ChatConnectionId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("Sex");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("LittleSocialNetwork.Entities.Friendship", b =>
                {
                    b.HasOne("LittleSocialNetwork.Entities.UserProfile", "From")
                        .WithMany("FriendsFromMe")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LittleSocialNetwork.Entities.UserProfile", "To")
                        .WithMany("FriendsToMe")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LittleSocialNetwork.Entities.SingleChatMessage", b =>
                {
                    b.HasOne("LittleSocialNetwork.Entities.UserProfile", "From")
                        .WithMany("MessagesFromMe")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LittleSocialNetwork.Entities.UserProfile", "To")
                        .WithMany("MessagesToMe")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LittleSocialNetwork.Entities.User", b =>
                {
                    b.HasOne("LittleSocialNetwork.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");
                });
#pragma warning restore 612, 618
        }
    }
}
